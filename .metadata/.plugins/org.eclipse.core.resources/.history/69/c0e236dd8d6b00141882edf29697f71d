package bdserver;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JOptionPane;

import dbserver.DBServer;



// Classe responsavel por criar e realizar as opera√ßoes sobre a base de dados
public class DB_ServerImpl implements DBServer,Serializable {
 
	
	private File lojas[]= {new File("/Lojas/loja1"),new File("/Lojas/loja2"),new File("/Lojas/loja3"),
			new File("/Lojas/loja4"),new File("/Lojas/loja5")}  ;
	
	
	private Map <Short,Short[]> lojProd; 
	private Map <Short,Short[]> carrinho = new HashMap<Short, Short[]>();
	private BufferedReader br;

	public DB_ServerImpl() throws IOException, RemoteException {
		lojProd = new HashMap<Short, Short[]>();
		carrinho = new HashMap<Short, Short[]>();
		String[] cols= null;
		
		br = new BufferedReader(new FileReader("/Resources/loja1"));
		try  
	     {
	         String sCurrentLine;
	         while ((sCurrentLine = br.readLine()) != null) {
	             System.out.println(sCurrentLine);
	         

	 		cols = sCurrentLine.split(" ");
	         }
	 		if (cols.length < 1) {
	 		    // handle error if there is not a key column
	 		}

	 		try {
	 		    short colKey = Short.parseShort(cols[0]);

	 		    Short []  colValues = new Short[cols.length];

	 		    for (int i = 1; i < cols.length; i++) {
	 		        colValues[i] = Short.parseShort(cols[i]) ;
	 		    }
	 		    
	 		       // adicionar os produtos e as lojas 
	 		   lojProd.put(colKey, colValues);

	 		   //  fechar a stream
	 		   br.close();
	 		
	 		 
	         }catch (NumberFormatException e) {
	 		   e.printStackTrace();
	 		}catch (IOException e) {
	 			e.printStackTrace();
	 		}
	 		
	      
	      }finally{
	    	  
	      }
	    
	     
	}
		
	
	
	
	

	@Override
	public boolean isAvaliable(short produto) throws RemoteException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addCarProd(short loja, short produto) throws RemoteException {
		// TODO Auto-generated method stub
		return false;
	}

	
	// devolve o carrinho aqui n precisa de ir a base de dados 
	@Override
	public  Short[] getCarProd(short guid) throws RemoteException {
		
		return carrinho.get(guid) ;
	}

	
	// para pagar temos de percorrer os ficheiros para retirar os produtos da bd 
	@Override
	public synchronized Short[]  payCarProd(short guid) throws RemoteException {
		
		
		
		return carrinho.get(guid); 
	}
	
	
	
	
}
